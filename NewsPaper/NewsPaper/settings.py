"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-iv*@irkq%((_@vfb*g1-&d)cob4-&k_)@oo!8c=#q4hvfahl&v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]




ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
# ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'signup': 'news.forms.BasicSignupForm'}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'news',
    'accounts',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
]



LOGIN_URL  ='/news/accounts/login/'
LOGIN_REDIRECT_URL = '/news/'
LOGOUT_REDIRECT_URL = '/news/'




SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False
# USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [ BASE_DIR / "static" ]


EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'imya6301'  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках, но включать его здесь обязательно
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_TIMEOUT = 60 

load_dotenv()
env_path = Path('.')/'.env'
load_dotenv(dotenv_path=env_path)
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")


APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25




# redis cloud работает (но не всегда)
# CELERY_BROKER_URL = 'redis://:ScUFPpj2FzddLtbiqhQ9WMee2nQnuzSK@redis-12614.c281.us-east-1-2.ec2.cloud.redislabs.com:12614/0'
# CELERY_RESULT_BACKEND = 'redis://:ScUFPpj2FzddLtbiqhQ9WMee2nQnuzSK@rredis-12614.c281.us-east-1-2.ec2.cloud.redislabs.com:12614/0'

# docker
CELERY_BROKER_URL = 'redis://default:redispw@localhost:49153'
CELERY_RESULT_BACKEND = 'redis://default:redispw@localhost:49153'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'

USE_I18N = True
LANGUAGE_CODE = 'ru'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'loggers': {
#         'django': {
#             'handlers': ['console_DEBUG', 'console_WARNING', 'console_ERROR', 'console_CRITICAL', 'file_generallog'],
#             'level': 'DEBUG',
#         },
#         'django.request': {
#             'handlers': ['file_errorslog_ERROR', 'file_errorslog_ERROR', 'mail_admins'],
#             'level': 'DEBUG',
#         },
#         'django.server': {
#             'handlers': ['file_errorslog_ERROR', 'file_errorslog_ERROR', 'mail_admins'],
#             'level': 'DEBUG',
#         },
#         'django.template': {
#             'handlers': ['file_errorslog_ERROR', 'file_errorslog_ERROR'],
#             'level': 'DEBUG',
#         },
#         'django.db_backends': {
#             'handlers': ['file_errorslog_ERROR', 'file_errorslog_ERROR'],
#             'level': 'DEBUG',
#         },
#         'django.security': {
#             'handlers': ['file_securitylog'],
#             'level': 'DEBUG',
#         },
#     },
#     'handlers': {
#         'console_DEBUG': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'formatter_ALM',
#             'filters': ['require_debug_true'],
#         },
#         'console_WARNING': {
#             'level': 'WARNING',
#             'class': 'logging.StreamHandler',
#             'formatter': 'formatter_ALM_P',
#             'filters': ['require_debug_true'],
#         },
#         'console_ERROR': {
#             'level': 'ERROR',
#             'class': 'logging.StreamHandler',
#             'formatter': 'formatter_ALM_PE',
#             'filters': ['require_debug_true'],
#         },
#         'console_CRITICAL': {
#             'level': 'CRITICAL',
#             'class': 'logging.StreamHandler',
#             'formatter': 'formatter_ALM_PE',
#             'filters': ['require_debug_true'],
#         },
#         'file_generallog': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'formatter': 'formatter_AL_MOD_M',
#             'filters': ['require_debug_false'],
#             'filename': 'general.log',
#         },
#         'file_errorslog_ERROR': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'formatter': 'formatter_ALM_PE',
#             'filename': 'errors.log',
#         },
#         'file_errorslog_CRITICAL': {
#             'level': 'CRITICAL',
#             'class': 'logging.FileHandler',
#             'formatter': 'formatter_ALM_PE',
#             'filename': 'errors.log',
#         },
#         'file_securitylog': {
#             'level': 'WARNING',
#             'class': 'logging.FileHandler',
#             'formatter': 'formatter_AL_MOD_M',
#             'filename': 'security.log',
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'formatter': 'formatter_ALM_P',
#             'filters': ['require_debug_false'],
#         }
#     },
#     'formatters': {
#         'formatter_ALM': {
#             'format': '{asctime} {levelname} {message}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#         'formatter_ALM_P': {
#             'format': '{asctime} {levelname} {message} {pathname}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#         'formatter_ALM_PE': {
#             'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#         'formatter_AL_MOD_M': {
#             'format': '{asctime} {levelname} {module} {message}',
#             'datetime': '%Y.%m.%d %H:%M:%S',
#             'style': '{',
#         },
#     },
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#         'require_debug_false': {
#             '()': 'django.utils.log.RequireDebugFalse',
#         },
#     },
# }
